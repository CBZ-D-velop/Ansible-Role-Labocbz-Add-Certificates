---
- name: "Get files from sources"
  run_once: true
  delegate_to: "{{ ansible_play_hosts[0] }}"
  block:
    - name: "Prepare workspace"
      block:
        - name: "Check if workspace exist"
          register: add_certificates_tmp_workspace_stat
          ansible.builtin.stat:
            path: "{{ add_certificates_tmp_workspace }}"

        - name: "Create workspace"
          when: not add_certificates_tmp_workspace_stat.stat.exists
          ansible.builtin.file:
            path: "{{ add_certificates_tmp_workspace }}"
            state: directory
            recurse: yes
            owner: "{{ add_certificates_bundle_dest_user }}"
            group: "{{ add_certificates_bundle_dest_group }}"
            mode: "{{ add_certificates_bundle_dest_mode }}"

    - name: "Get bundle from remote source"
      when: add_certificates_bundle_src is match("http.*://.*")
      ansible.builtin.get_url:
        url: "{{ add_certificates_bundle_src }}"
        dest: "{{ add_certificates_tmp_workspace }}"
        owner: "{{ add_certificates_bundle_dest_user }}"
        group: "{{ add_certificates_bundle_dest_group }}"
        mode: "{{ add_certificates_bundle_dest_mode }}"
        validate_certs: false
        timeout: 120
        username: "{{ add_certificates_bundle_src_user }}"
        password: "{{ add_certificates_bundle_src_password }}"
        force_basic_auth: yes

    - name: "Get bundle from local source"
      when: not add_certificates_bundle_src is match("http.*://.*")
      ansible.builtin.copy:
        remote_src: yes
        src: "{{ add_certificates_bundle_src }}"
        dest: "{{ add_certificates_tmp_workspace }}"
        owner: "{{ add_certificates_bundle_dest_user }}"
        group: "{{ add_certificates_bundle_dest_group }}"
        mode: "{{ add_certificates_bundle_dest_mode }}"

    - name: "Fetch bundle on controller node"
      ansible.builtin.fetch:
        src: "{{ add_certificates_tmp_workspace }}/{{ add_certificates_bundle_name }}.zip"
        dest: "/tmp/.ansible/add_certificates/{{ add_certificates_bundle_name }}.zip"
        flat: yes

- name: "Deploy bundler on servers"
  notify: "Update CAs"
  block:
    - name: "Check if bundle destination exist"
      register: add_certificates_bundle_dest_stat
      ansible.builtin.stat:
        path: "{{ add_certificates_bundle_dest }}"

    - name: "Create bundle destination"
      when: not add_certificates_bundle_dest_stat.stat.exists
      ansible.builtin.file:
        path: "{{ add_certificates_bundle_dest }}"
        state: directory
        recurse: yes
        owner: "{{ add_certificates_bundle_dest_user }}"
        group: "{{ add_certificates_bundle_dest_group }}"
        mode: "{{ add_certificates_bundle_dest_mode }}"

    - name: "Import bundle"
      ansible.builtin.copy:
        dest: "{{ add_certificates_bundle_dest }}/{{ add_certificates_bundle_name }}.zip"
        src: "/tmp/.ansible/add_certificates/{{ add_certificates_bundle_name }}.zip"
        owner: "{{ add_certificates_bundle_dest_user }}"
        group: "{{ add_certificates_bundle_dest_group }}"
        mode: "{{ add_certificates_bundle_dest_mode }}"

    - name: "Deploy bundle"
      ansible.builtin.unarchive:
        dest: "{{ add_certificates_bundle_dest }}"
        src: "{{ add_certificates_bundle_dest }}/{{ add_certificates_bundle_name }}.zip"
        owner: "{{ add_certificates_bundle_dest_user }}"
        group: "{{ add_certificates_bundle_dest_group }}"
        mode: "{{ add_certificates_bundle_dest_mode }}"
        remote_src: yes

    - name: "Import CA on hosts"
      when: add_certificates_bundle_type == "CA"
      ansible.builtin.copy:
        remote_src: yes
        src: "{{ add_certificates_bundle_dest }}/{{ add_certificates_bundle_name }}"
        dest: "{{ add_certificates_ca_location }}"
        owner: "{{ add_certificates_bundle_dest_user }}"
        group: "{{ add_certificates_bundle_dest_group }}"
        mode: "{{ add_certificates_bundle_dest_mode }}"
